import React, { useState, useEffect } from "react";
import {
  Menu,
  Icon,
  Modal,
  Button,
  Form,
  Input,
  Message
} from "semantic-ui-react";
import firebase from "../Firebase";
import { connect } from "react-redux";
import { setCurrentChannel } from "../../actions";
import { Loader } from "semantic-ui-react";

function Channels(props) {
  const [allChannels, setAllChannels] = useState([]);
  const [firstLoad, setfirstLoad] = useState(true);
  const [modal, setModal] = useState(false);
  const [activeChannel, setActiveChannel] = useState();

  const [channelName, setChannelName] = useState("");
  const [channelDetail, setChannelDetail] = useState("");
  const [error, setError] = useState("");
  const [currentUser] = useState(props.currentUser);

  const [loading] = useState(false);
  const [channelsRef] = useState(firebase.database().ref("channels"));

  const handleCloseModal = () => {
    setModal(false);
  };

  const handleOpenModal = () => {
    setModal(true);
  };

  const handleChange = event => {
    if (event.target.name === "channelName") {
      setChannelName(event.target.value);
    } else if (event.target.name === "channelDetalis") {
      setChannelDetail(event.target.value);
    }
  };

  useEffect(() => {
    showChannels();
    return () => {
      channelsRef.off();
    };
  }, []);

  const showChannels = () => {
    let loadedChannels = [];
    channelsRef
      .orderByChild("name")
      .limitToFirst(99)
      .on("child_added", function(snapshot) {
        loadedChannels.push(snapshot.val());
        setAllChannels({ channels: loadedChannels });
      });
  };

  const isFormIsValid = () => {
    if (channelName.length < 3 || channelDetail.length < 3) {
      setError(
        "Channel name or channel detail is too short (atleast 3 characters)"
      );
      return false;
    } else {
      return true;
    }
  };

  const handleAddChannel = () => {
    // Generate a reference to a new location and add some data using push()
    const newPostRef = channelsRef.push();
    // Get the unique key generated by push()
    const refKey = newPostRef.key;

    const newChannel = {
      id: refKey,
      name: channelName,
      details: channelDetail,
      createdBy: {
        name: currentUser.displayName,
        avatar: currentUser.photoURL
      }
    };

    channelsRef
      .child(refKey)
      .update(newChannel)
      .then(() => {
        setChannelName("");
        setChannelDetail("");
        handleCloseModal();
        console.log("channel added");
      })
      .catch(error => {
        console.log(error);
      });
  };
  const handleSubmit = event => {
    event.preventDefault();

    if (isFormIsValid()) {
      handleAddChannel();
    }
  };

  const displayChannels = () => {
    if (allChannels.channels) {
      if (firstLoad) {
        props.setCurrentChannel(allChannels.channels[0]);
        setfirstLoad(false);
        setActiveChannel(allChannels.channels[0].id);
      }

      return allChannels.channels.map(channel => (
        <Menu.Item
          key={channel.id}
          onClick={() => changeChannel(channel)}
          name={channel.name}
          active={activeChannel === channel.id}
        >
          # {channel.name}
        </Menu.Item>
      ));
    }
  };

  const changeChannel = channel => {
    setActiveChannel(channel.id);
    props.setCurrentChannel(channel);
  };

  return (
    <React.Fragment>
      <Menu.Menu className="menu">
        <Menu.Item>
          <span>
            <Icon name="exchange"></Icon> CHANNELS
          </span>
          {"  "}(
          {allChannels.channels !== undefined && allChannels.channels.length})
          <Icon onClick={handleOpenModal} name="add"></Icon>
        </Menu.Item>

        {allChannels.channels === undefined && (
          <Loader active size="huge" content="Loading Channels"></Loader>
        )}
        {displayChannels()}
      </Menu.Menu>

      <Modal open={modal} onClose={handleCloseModal} basic size="small">
        <Modal.Header>Add chanel</Modal.Header>
        <Modal.Content>
          <Form onSubmit={handleSubmit}>
            <Form.Field>
              <Input
                fluid
                label="Name of the channel"
                name="channelName"
                onChange={handleChange}
              ></Input>
            </Form.Field>
            <Form.Field>
              <Input
                fluid
                label="About the channel"
                name="channelDetalis"
                onChange={handleChange}
              ></Input>
            </Form.Field>
          </Form>
          {error !== "" && (
            <Message error>
              {" "}
              <h3>Error</h3>
              {error}
            </Message>
          )}
        </Modal.Content>
        <Modal.Actions>
          <Button
            disabled={loading}
            onClick={handleSubmit}
            className={loading ? "checkmark" : ""}
            color="green"
          >
            Add
          </Button>
          <Button
            disabled={loading}
            onClick={handleCloseModal}
            className={"cancel"}
            color="red"
          >
            Cancel
          </Button>
        </Modal.Actions>
      </Modal>
    </React.Fragment>
  );
}

export default connect(null, { setCurrentChannel })(Channels);
