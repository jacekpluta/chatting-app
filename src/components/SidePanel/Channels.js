import React, { useState, useEffect } from "react";
import {
  Menu,
  Icon,
  Modal,
  Button,
  Form,
  Input,
  Message
} from "semantic-ui-react";
import firebase from "../Firebase";
import { connect } from "react-redux";
import { setCurrentChannel, setPrivateChannel } from "../../actions";

function Channels(props) {
  const [allChannels, setAllChannels] = useState([]);
  const [firstLoad, setfirstLoad] = useState(false);
  const [modal, setModal] = useState(false);
  const [activeChannel, setActiveChannel] = useState(null);

  const [channelName, setChannelName] = useState("");
  const [channelDetail, setChannelDetail] = useState("");
  const [error, setError] = useState("");

  const [channel, setChannel] = useState([]);

  const [loading] = useState(false);
  const [channelsRef] = useState(firebase.database().ref("channels"));
  const [messagesRef] = useState(firebase.database().ref("messages"));

  const [notifications, setNotification] = useState([]);

  const { currentUser, currentChannel } = props;

  const handleCloseModal = () => {
    setModal(false);
  };

  const handleOpenModal = () => {
    setModal(true);
  };

  const handleChange = event => {
    if (event.target.name === "channelName") {
      setChannelName(event.target.value);
    } else if (event.target.name === "channelDetalis") {
      setChannelDetail(event.target.value);
    }
  };

  useEffect(() => {
    addMainChannel();
    showChannels();
    return () => {
      channelsRef.off();
    };
  }, []);

  const showChannels = () => {
    let loadedChannels = [];

    channelsRef
      .orderByChild("name")
      .limitToFirst(99)
      .on("child_added", function(snapshot) {
        loadedChannels.push(snapshot.val());
        props.setCurrentChannel(loadedChannels[0]);
        setAllChannels({ channels: loadedChannels });
        //  addNotificationListener(snapshot.key);
      });

    setfirstLoad(true);
  };

  useEffect(() => {
    if (currentChannel) {
      loadAllCurrentChannels();
    }
  }, [currentChannel]);

  const loadAllCurrentChannels = () => {
    channelsRef
      .orderByChild("name")
      .limitToFirst(99)
      .on("child_added", function(snap) {
        //    addNotificationListener(snap.key);
      });
  };

  // const addNotificationListener = channelId => {
  //   if (currentChannel) {
  //     // messagesRef.child(channelId).once("value", snapshot => {
  //     //   console.log(snapshot.val());
  //     // });
  //     console.log(channelId);
  //     console.log(currentChannel.id);
  //     if (channelId !== currentChannel.id) {
  //       messagesRef
  //         .child(channelId)
  //         .endAt()
  //         .limitToLast(1)
  //         .on("child_added", function(snapshot) {
  //           console.log(snapshot);
  //           setNotification(notifications => [
  //             ...notifications,
  //             {
  //               channelId: channelId,
  //               lastData: snapshot.val().timeStamp,
  //               total: snapshot.numChildren(),
  //               lastKnownTotal: snapshot.numChildren(),
  //               count: 0
  //             }
  //           ]);
  //         });
  //     }
  //   } else {
  //   }
  // };
  // if (notifications && notifications.length >= 1) {
  //   console.log(notifications);
  //   // console.log(notifications.length - 1);
  // }

  const isFormIsValid = () => {
    if (channelName.length < 3 || channelDetail.length < 3) {
      setError(
        "Channel name or channel detail is too short (atleast 3 characters)"
      );
      return false;
    } else {
      return true;
    }
  };

  const addMainChannel = () => {
    const mainChannel = {
      id: "mainChannel",
      name: "Main Channel",
      details: "This is main channel",
      createdBy: {
        uid: "111",
        name: "Admin",
        avatar: ""
      }
    };

    channelsRef
      .child("mainChannel")
      .update(mainChannel)
      .then(() => {
        console.log("main channel added");
      })
      .catch(error => {
        console.log(error);
      });
  };

  const handleAddChannel = () => {
    // Generate a reference to a new location and add some data using push()
    const newPostRef = channelsRef.push();
    // Get the unique key generated by push()
    const refKey = newPostRef.key;

    const newChannel = {
      id: refKey,
      name: channelName,
      details: channelDetail,
      createdBy: {
        uid: currentUser.uid,
        name: currentUser.displayName,
        avatar: currentUser.photoURL
      }
    };

    channelsRef
      .child(refKey)
      .update(newChannel)
      .then(() => {
        setChannelName("");
        setChannelDetail("");
        handleCloseModal();
        console.log("channel added");
      })
      .catch(error => {
        console.log(error);
      });
  };

  const handleSubmit = event => {
    event.preventDefault();

    if (isFormIsValid()) {
      handleAddChannel();
    }
  };

  const displayChannels = () => {
    if (allChannels.channels) {
      if (firstLoad) {
        props.setPrivateChannel(false);
        setfirstLoad(false);
        props.setCurrentChannel(allChannels.channels[0]);
      }

      return allChannels.channels.map(channel => (
        <Menu.Item
          key={channel.id}
          onClick={() => changeChannel(channel)}
          name={channel.name}
        >
          # {channel.name}
        </Menu.Item>
      ));
    }
  };

  const changeChannel = channel => {
    setActiveChannel(channel.id);
    props.setCurrentChannel(channel);
    props.setPrivateChannel(false);
    setChannel({ channel });
  };

  return (
    <React.Fragment>
      <Menu.Menu className="menu">
        <Menu.Item>
          <span>
            <Icon name="exchange"></Icon> CHANNELS
          </span>
          {"  "}(
          {allChannels.channels !== undefined && allChannels.channels.length})
          <Icon onClick={handleOpenModal} name="add"></Icon>
        </Menu.Item>

        {displayChannels()}
      </Menu.Menu>

      <Modal open={modal} onClose={handleCloseModal} basic size="small">
        <Modal.Header>Add chanel</Modal.Header>

        <Modal.Content>
          <Form onSubmit={handleSubmit}>
            <Form.Field>
              <Input
                fluid
                label="Name of the channel"
                name="channelName"
                onChange={handleChange}
              ></Input>
            </Form.Field>
            <Form.Field>
              <Input
                fluid
                label="About the channel"
                name="channelDetalis"
                onChange={handleChange}
              ></Input>
            </Form.Field>
          </Form>
          {error !== "" && (
            <Message error>
              {" "}
              <h3>Error</h3>
              {error}
            </Message>
          )}
        </Modal.Content>
        <Modal.Actions>
          <Button
            disabled={loading}
            onClick={handleSubmit}
            className={loading ? "checkmark" : ""}
            color="green"
          >
            Add
          </Button>
          <Button
            disabled={loading}
            onClick={handleCloseModal}
            className={"cancel"}
            color="red"
          >
            Cancel
          </Button>
        </Modal.Actions>
      </Modal>
    </React.Fragment>
  );
}

export default connect(null, { setCurrentChannel, setPrivateChannel })(
  Channels
);
